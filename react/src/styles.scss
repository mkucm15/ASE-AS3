@import "./breakpoints.scss";

body {
  font-family: Arial, "Helvetica Neue", Helvetica, sans-serif;
  color: #0b0331;
  background-image: linear-gradient(120deg, #23db3b 0%, #2c1cbdad 100%);
  font-size: 16px;
  font-weight: 400;
}


.bg-image {
  background-image: url("https://elitecryptoconnections.com/Botstuff/TokenOfLiberiaLogo.png");
  
  filter: blur(15px);
  -webkit-filter: blur(10px);

  height: 100vh; 
  width:100%;

  background-position: center;
  background-repeat: no-repeat;
  background-size: cover;
  position: fixed;
  z-index: -1;
  padding: 0px;
}


.main {
  display: flex;
  flex-direction: row;
  @include media('<=tablet') {
    flex-direction: column;
  }
}

.image {
  display:flex;
 margin-bottom: -40px;
 margin-right: auto;
}


a {
  color:#FFFFFF;
  overflow-wrap: anywhere;
}

p {
  font-size: 16px;
  padding: 10px;
  @include media('<=phone') {
    font-size: 12px;
  }
}
.AdPC{
  display: flex;
  justify-content: center;
  @include media('<=phone') {
    display:none;
  }
  
  }
  .Admobile{
    display: flex;
    justify-content: center;
    @include media('>=tablet') {
      display:none;
    }
    
    }



.button {
  cursor: pointer;
  background-color: #201869;
  box-shadow: 10px 10px 18px 0 rgba(0, 0, 0, 0.3),
    inset -10px -10px 18px 0 rgba(0, 0, 0, 0.3);
  text-align: center;
  text-decoration: none;
  font-size: 16px;
  border: none;
  border-radius: 12px;
  color: white;
  padding: 20px;
  margin: 4px 5px;
  @include media('<=tablet') {
    margin: 4px 5px 0px 0px; 
  }
  
}
.button2 {
  cursor: pointer;
  background-color: #201869;
  box-shadow: 10px 10px 18px 0 rgba(0, 0, 0, 0.3),
    inset -10px -10px 18px 0 rgba(0, 0, 0, 0.3);
  text-align: center;
  text-decoration: none;
  font-size: 16px;
  border: none;
  border-radius: 12px;
  color: white;
  padding: 20px;
  margin: 80px 10px 0px 0px;
  @include media('<=tablet') {
    margin: 80px 5px 0px 0px; 
  }
  
  
  
}

.Header {
  display: flex;
  justify-content: center;
  align-items: center;
  margin-top: 15px;
  @include media('<=phone') {
    font-size: 12px;
    display: flex;
    flex-direction: column;
    padding: 12px;
  }

  

  .miniText {
    margin-left: 20px;
    @include media('<=phone') {
      font-size:14px;
    }
  }
}
.tr-delay-02, .tr-delay-02:before, .tr-delay-02:after {
  -webkit-transition-delay: .2s!important;
  -o-transition-delay: .2s!important;
  transition-delay: .2s!important;
}
.community_btns{
  margin: 70px 10px 0px 0px;
  float:left;
}
.header-contact__flex {
  overflow: hidden;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  width: 20px;
  height: 60vh;
}
.header-contact {
  width: 20px;
  position: fixed;
  left: 20px!important;
  top: 50%!important;
  z-index: 10;
  pointer-events: none;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}


.block {
  margin: 10px;
  background: radial-gradient(circle, #e7e4e0 0%, #f3f1ed 100%);
  border-radius: 20px;
  border: 2px solid #1b088644;
  padding: 0 0 15px 0;
  text-align: center;
  opacity: 0.9;
  @include media('>=tablet') {
    font-size:14px;
    width:100%
  }
 
  h1 {
    margin:0;
    border-radius: 20px 20px 0 0;
    border-bottom: 1px solid #000;
    background-image: linear-gradient(120deg, #e2cc0a 0%, #c7a55a 100%);
    padding: 20px;
  }
}



input {
	padding: 10px;
	border-radius: 0px;
	border: 1px solid #000;
	font-size: 18px;
	background:#c7a55a;
	color: #FFFFFF;
	outline: none;
	-webkit-appearance: none;
    -moz-appearance: none;
}

/*
  https://developer.mozilla.org/en/docs/Web/CSS/box-shadow
  box-shadow: [inset?] [top] [left] [blur] [size] [color];

  Tips:
    - We're setting all the blurs to 0 since we want a solid fill.
    - Add the inset keyword so the box-shadow is on the inside of the element
    - Animating the inset shadow on hover looks like the element is filling in from whatever side you specify ([top] and [left] accept negative values to become [bottom] and [right])
    - Multiple shadows can be stacked
    - If you're animating multiple shadows, be sure to keep the same number of shadows on hover/focus as non-hover/focus (even if you have to create a transparent shadow) so the animation is smooth. Otherwise, you'll get something choppy.
*/

// Animate the size, inside
.fill:hover,
.fill:focus {
  box-shadow: inset 0 0 0 2em var(--hover);
}

// Animate the size, outside
.pulse:hover, 
.pulse:focus {
  animation: pulse 1s;
  box-shadow: 0 0 0 2em transparent;
}

@keyframes pulse {
  0% { box-shadow: 0 0 0 0 var(--hover); }
}

// Stack multiple shadows, one from the left, the other from the right
.close:hover,
.close:focus {
  box-shadow: 
    inset -3.5em 0 0 0 var(--hover),
    inset 3.5em 0 0 0 var(--hover);  
}

// Size can also be negative; see how it's smaller than the element
.raise:hover,
.raise:focus {
  box-shadow: 0 0.5em 0.5em -0.4em var(--hover);
  transform: translateY(-0.25em);
}

// Animating from the bottom
.up:hover,
.up:focus {
  box-shadow: inset 0 -3.25em 0 0 var(--hover);
}

// And from the left
.slide:hover,
.slide:focus {
  box-shadow: inset 6.5em 0 0 0 var(--hover);
}

// Multiple shadows, one on the outside, another on the inside
.offset {  
  box-shadow: 
    0.3em 0.3em 0 0 var(--color),
    inset 0.3em 0.3em 0 0 var(--color);
  
  &:hover,
  &:focus {
    box-shadow: 
      0 0 0 0 var(--hover),
      inset 6em 3.5em 0 0 var(--hover);
  }
}

//=== Set button colors
// If you wonder why use Sass vars or CSS custom properties...
  // Make a map with the class names and matching colors
$colors: (
  fill: #201869,
  pulse: #201869, 
  close: #201869, 
  raise: #201869, 
  up: #201869, 
  slide: #201869, 
  offset: #201869
);

// Sass variables compile to a static string; CSS variables are dynamic and inherited
  // Loop through the map and set CSS custom properties using Sass variables
@each $button, $color in $colors {
  .#{$button} {
    --color: #{$color};
    --hover: #{adjust-hue($color, 15deg)};
  }
}

// Now every button will have different colors as set above. We get to use the same structure, only changing the custom properties.
button {  
  color: var(--color);
  transition: 0.55s;
  
  &:hover,
  &:focus { 
    border-color: var(--hover);
    color: rgb(65, 2, 102);
  }
}



// Basic button styles
button {
  background: none;
  border: 2px solid;
  font: inherit;
  line-height: 1;
  margin: 0.5em;
  padding: 1em 2em;
}

h1 { font-weight: 400; }

code { 
  color: #ebebeb;
  font: inherit;
}

